group_by(CNTRY) %>%
summarise(
NA_mean = mean(Prop_NA), # na.rm = TRUE para ignorar NAs
.groups = "drop"
)
country_level_summary <- selfeff_country_mean %>%
left_join(cil_country_mean, by = "CNTRY")
corr_data <- left_join(
NAs_country_mean,
country_level_summary,
by = "CNTRY"
)
# Seleccionar y renombrar variables
corr_data <- corr_data %>%
select(
NA_mean,
selfeff_mean,
CIL_mean
) %>%
rename(
`Promedio % NAs` = NA_mean,
`Promedio Autoeficacia` = selfeff_mean,
`Promedio Puntaje CIL` = CIL_mean
)
# Calcular la matriz de correlación
matriz_correlacion <- cor(corr_data, use = "pairwise.complete.obs")
# Generar el gráfico
corrplot(matriz_correlacion,
method = "color",
type = "lower",
order = "original",
addCoef.col = "black",
tl.col = "black",
tl.srt = 45,
diag = FALSE,
cl.pos = "r",
title = "Matriz de Correlaciones entre Indicadores Agregados",
mar = c(0, 0, 2, 0)
)
pisa <- readRDS("data/proc_data/pisa22ict.rds")
items <- c("IC183Q01JA", "IC183Q02JA", "IC183Q03JA", "IC183Q04JA", "IC183Q05JA",
"IC183Q07JA", "IC183Q08JA", "IC183Q09JA", "IC183Q10JA", "IC183Q12JA",
"IC183Q13JA", "IC183Q14JA", "IC183Q15JA", "IC183Q16JA")
pisa$CNT <- haven::as_factor(pisa$CNT)
data_longp <- pisa %>%
select(CNT, all_of(items)) %>%
pivot_longer(cols = all_of(items),
names_to = "Item",
values_to = "Valor")
prop_na_cnt_item <- data_longp %>%
group_by(CNT, Item) %>%
summarise(
Total = n(),
NAs = sum(is.na(Valor)),
Prop_NA = NAs / Total,
.groups = "drop"
)
prop_na_general_itemp <- data_longp %>%
group_by(Item) %>%
summarise(
Total_General = n(),
NAs_General = sum(is.na(Valor)),
Prop_NA_General = NAs_General / Total_General,
.groups = "drop"
)
data_for_labelsp <- prop_na_cnt_item %>%
group_by(Item) %>%
slice_max(order_by = Prop_NA, n = 5, with_ties = FALSE) %>% # with_ties=FALSE para asegurar solo 5
ungroup()
colored_labels <- setNames(items, items)
highlight_items <- c("IC183Q10JA", "IC183Q13JA", "IC183Q14JA", "IC183Q15JA")
for (item in highlight_items) {
colored_labels[item] <- paste0("<span style='color:#D73027;'>", item, "</span>")  # rojo oscuro
}
prop_na_cnt_item$Item <- factor(prop_na_cnt_item$Item, levels = rev(items), labels = rev(colored_labels))
prop_na_general_itemp$Item <- factor(prop_na_general_itemp$Item, levels = rev(items), labels = rev(colored_labels))
data_for_labelsp$Item <- factor(data_for_labelsp$Item, levels = rev(items), labels = rev(colored_labels))
grafico_cleveland_nas <- ggplot(prop_na_cnt_item, aes(x = Prop_NA, y = Item)) +
# Puntos para cada país
geom_point(aes(color = "País"), alpha = 0.7, size = 2) +
# Punto para el promedio general del item
geom_point(data = prop_na_general_itemp,
aes(x = Prop_NA_General, y = Item, color = "Promedio General (Item)"),
size = 4, shape = 18) + # Usamos una forma diferente (diamante)
# Etiquetas para los 3 países con más NAs por item
# Pasamos 'data_for_labels' al argumento 'data' de esta capa específica
geom_text_repel(data = data_for_labelsp,
aes(label = CNT), # Usamos directamente la columna CNTRY
size = 2.8,
max.overlaps = Inf,
box.padding = 0.4,
point.padding = 0.2,
segment.color = 'grey50',
segment.size = 0.3,
min.segment.length = 0
) +
# Escalas y etiquetas
scale_x_continuous(labels = percent_format(accuracy = 1),
name = "% of Missings") +
scale_y_discrete(name = "Items") +
scale_color_manual(name = "Reference:",
values = c("País" = "steelblue", "Promedio General (Item)" = "red"),
guide = guide_legend(override.aes = list(shape = c(16, 18), size = c(2,4)))) +
# Título y tema
labs(title = "Missing values proportion by country around DSE ítems",
subtitle = "5 most % countries with more missing values are labelled",
caption = "Data: PISA 2022") +
theme_minimal(base_size = 11) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = ggtext::element_markdown(size = 9),
axis.text.x = element_text(size=9)
)
print(grafico_cleveland_nas)
#| label: libraries
#| echo: false
pacman::p_load(
dplyr, haven, sjlabelled,  psych,  purrr,  tidyr,  sjPlot,  ggplot2,
parameters,  table1,  car,  beeswarm,  lme4, scales, ggrepel, corrplot,
ggtext, patchwork, lavaan, semTools)
options(scipen = 999)
rm(list = ls())
#| include: false
library(knitr)
knitr::opts_chunk$set(echo = TRUE, include = TRUE, warning = FALSE, message = FALSE)
table_format <- if(is_html_output()) {
"html"
} else if(is_latex_output()) {
"latex"
}
table_format2 <- if(is_html_output()) {
T
} else if(is_latex_output()) {
F
}
options(kableExtra.html.bsTable = T)
options(knitr.kable.NA = "")
#| label: data
#| echo: false
icils <- readRDS("./data/proc_data/icils23_proc.rds")
pisa <- readRDS("./data/proc_data/pisa22_proc.rds")
#| label: fig-descr-icils
#| echo: true
#| fig-cap: Digital self-efficacy ICILS
#| fig-cap-location: bottom
a <- icils %>%
select(IS3G24A, IS3G24B, IS3G24C, IS3G24E, IS3G24F,
IS3G24G, IS3G24H, IS3G24I, IS3G24J, IS3G24M) %>%
sjPlot::plot_likert(geom.colors = "Reds",
title = c("General (n = 135.615)"),
sort.frq = "pos.desc",
geom.size = 0.8,
axis.labels = c("edit_photos", "edit_text", "search_info",
"change_settings", "create_pres", "upload_media", "insert_image", "install_app", "eval_info", "find_source"),
catcount = 4,
values  =  "sum.outside",
reverse.colors = F,
reverse.scale = T,
show.n = FALSE,
show.prc.sign = T
) +
ggplot2::theme(legend.position = "none")
b <- icils %>%
select(IS3G24D, IS3G24K, IS3G24L) %>%
sjPlot::plot_likert(geom.colors = "Reds",
title = c("Specialized"),
sort.frq = "pos.desc",
geom.size = 0.8,
axis.labels = c("build_page", "write_code", "devel_program"),
catcount = 4,
values  =  "sum.outside",
reverse.colors = F,
reverse.scale = T,
show.n = FALSE,
show.prc.sign = T
) +
ggplot2::theme(legend.position = "bottom")
liker_icils <- a/b
liker_icils
#| label: Multigroup
multigroup_cfa <- '
gen_dse = ~ search_info + asses_info + share_info + pair_collab + how_to_share +
edit_text + collect_data + create_pres + change_settings + select_app
spec_dse = ~ page_web + create_program + identify_error + logical_solution
'
#| label: select variables
#| include: false
pisa <- pisa %>%
select(search_info, asses_info, share_info, pair_collab, how_to_share,
edit_text, collect_data, create_pres, page_web, change_settings,
select_app, create_program, identify_error, logical_solution, CNT)
#| label: Multigroup
multigroup_cfa <- '
gen_dse = ~ search_info + asses_info + share_info + pair_collab + how_to_share +
edit_text + collect_data + create_pres + change_settings + select_app
spec_dse = ~ page_web + create_program + identify_error + logical_solution
'
#| label: modelo confirmatorio multigrupo
fitgroup <- sem(model = multigroup_cfa, data = pisa, group = "CNT")
all_params <- parameterEstimates(fitgroup, standardized = TRUE)
factor_loadings_all_groups <- all_params %>%
filter(op == "=~")
group_labels <- lavInspect(fitgroup, "group.label")
country_map <- data.frame(group = 1:length(group_labels), CNT = unlist(group_labels))
factor_loadings_all_groups <- factor_loadings_all_groups %>%
left_join(country_map, by = "group")
loadings_gen_dse <- factor_loadings_all_groups %>%
filter(lhs == "gen_dse") %>%
select(CNT, item = rhs, loading = std.all, latent_factor = lhs)
labels_gen_dse <- loadings_gen_dse %>%
group_by(item) %>%
slice_min(order_by = loading, n = 3) %>%
ungroup()
loadings_spec_dse <- factor_loadings_all_groups %>%
filter(lhs == "spec_dse") %>%
select(CNT, item = rhs, loading = std.all, latent_factor = lhs)
labels_spec_dse <- loadings_spec_dse %>%
group_by(item) %>%
slice_min(order_by = loading, n = 3) %>%
ungroup()
library(forcats)
plot_gen_dse <- ggplot(loadings_gen_dse,
aes(x = loading,
y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
geom_point(aes(color = '#B42012'), size = 3, alpha = 0.7) +
geom_text(data = labels_gen_dse,
aes(label = CNT),
nudge_y = 0.3,
size = 2.5,
color = "black",
check_overlap = TRUE) +
scale_color_identity(name = "Factor",
guide = "legend",
labels = c("General")) +
labs(title = "Cargas Factoriales: Autoeficacia General",
x = "Carga Factorial Estandarizada",
y = "Ítem") +
theme_minimal(base_size = 10) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
print(plot_gen_dse)
plot_spec_dse <- ggplot(loadings_spec_dse,
aes(x = loading,
y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
geom_point(aes(color = '#E16462'), size = 3, alpha = 0.7) +
geom_text_repel(data = labels_spec_dse,
aes(label = CNT),
size = 2.5,
color = "black",
box.padding = 0.4,
point.padding = 0.2,
min.segment.length = 0,
max.overlaps = Inf) +
scale_color_identity(name = "Factor",
guide = "legend",
labels = c("Especializada")) +
labs(title = "Cargas Factoriales: Autoeficacia Especializada",
x = "Carga Factorial Estandarizada",
y = "Ítem") +
theme_minimal(base_size = 10) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
print(plot_spec_dse)
lista_paises <- unique(unlist(pisa$CNT))
resultados_lista <- list()
summary_lista <- list()
for (pais_actual in lista_paises) {
# Imprimimos el progreso
cat("Procesando:", pais_actual, "...\n")
datos_pais <- pisa %>%
filter(CNT == pais_actual)
fit_pais <- tryCatch({
sem(model = multigroup_cfa,
data = datos_pais)
}, error = function(e) {
cat("  -> ¡ERROR! No se pudo ajustar el modelo para", pais_actual, ". Razón:", conditionMessage(e), "\n")
return(NULL)
})
if (!is.null(fit_pais)) {
if (lavInspect(fit_pais, "converged")) {
medidas_ajuste <- fitMeasures(fit_pais)
resultados_lista[[pais_actual]] <- medidas_ajuste
cat("  -> Modelo ajustado y resultados guardados.\n")
} else {
cat("  -> ¡ADVERTENCIA! El modelo para", pais_actual, "no convergió. Se omitirán sus resultados.\n")
resultados_lista[[pais_actual]] <- rep(NA, número_de_indicadores)
}
}
}
cat("\n...Proceso de ajuste finalizado.\n")
fit_indices_por_pais <- do.call(rbind, resultados_lista)
fit_indices_por_pais <- as.data.frame(fit_indices_por_pais)
fit_indices_por_pais <- fit_indices_por_pais %>%
tibble::rownames_to_column(var = "Pais")
fit_indices_por_pais <- do.call(rbind, resultados_lista)
fit_indices_por_pais <- as.data.frame(fit_indices_por_pais)
fit_indices_por_pais <- fit_indices_por_pais %>%
tibble::rownames_to_column(var = "Pais")
indices_ajuste <- fit_indices_por_pais %>%
select(chisq, df, rmsea, rmsea.ci.lower,  rmsea.ci.upper, srmr, cfi, tli)
indices_ajuste <- fit_indices_por_pais %>%
select(chisq, df, rmsea, rmsea.ci.lower,  rmsea.ci.upper, srmr, cfi, tli)
View(indices_ajuste)
table1::table1(~ .,data=indices_ajuste)
multimodel_cfa <- '
level: 1
gen_dse = ~ search_info + asses_info + share_info + pair_collab + how_to_share +
edit_text + collect_data + create_pres + change_settings + select_app
spec_dse = ~ create_program + identify_error + logical_solution
level: 2
gen_dse = ~ search_info + asses_info + share_info + pair_collab + how_to_share +
edit_text + collect_data + create_pres + change_settings + select_app
spec_dse = ~ create_program + identify_error + logical_solution
'
fit <- sem(model = multimodel_cfa, data = pisa, cluster = "CNT")
#| label: tabla-gt-basica
#| echo: false
library(gt)
# Asumiendo que 'indices_ajuste' ya existe
gt(indices_ajuste)
View(indices_ajuste)
indices_ajuste <- fit_indices_por_pais %>%
select(CNT, chisq, df, rmsea, rmsea.ci.lower,  rmsea.ci.upper, srmr, cfi, tli)
library(gt)
# Asumiendo que 'indices_ajuste' ya existe
gt(indices_ajuste)
fit_indices_por_pais <- do.call(rbind, resultados_lista)
fit_indices_por_pais <- as.data.frame(fit_indices_por_pais)
fit_indices_por_pais <- fit_indices_por_pais %>%
tibble::rownames_to_column(var = "Pais")
indices_ajuste <- fit_indices_por_pais %>%
select(CNT, chisq, df, rmsea, rmsea.ci.lower,  rmsea.ci.upper, srmr, cfi, tli)
View(fit_indices_por_pais)
fit_indices_por_pais <- do.call(rbind, resultados_lista)
fit_indices_por_pais <- as.data.frame(fit_indices_por_pais)
fit_indices_por_pais <- fit_indices_por_pais %>%
tibble::rownames_to_column(var = "CNT")
indices_ajuste <- fit_indices_por_pais %>%
select(CNT, chisq, df, rmsea, rmsea.ci.lower,  rmsea.ci.upper, srmr, cfi, tli)
#| label: tabla-gt-basica
#| echo: false
library(gt)
# Asumiendo que 'indices_ajuste' ya existe
gt(indices_ajuste)
pacman::p_load(
dplyr, haven, sjlabelled,  psych,  purrr,  tidyr,  sjPlot,  ggplot2,
parameters,  table1,  car,  beeswarm,  lme4, scales, ggrepel, corrplot,
ggtext, patchwork, lavaan, semTools, DT)
#| label: tabla-interactiva
#| echo: false
datatable(
indices_ajuste,
options = list(
pageLength = 5,
autoWidth = TRUE,
searchHighlight = TRUE
),
filter = 'top',
rownames = FALSE,
caption = "Índices de Ajuste del Modelo (Interactiva)"
)
datatable(
indices_ajuste,
options = list(
pageLength = 10,
autoWidth = TRUE,
searchHighlight = TRUE
),
filter = 'top',
rownames = FALSE,
caption = "Índices de Ajuste del Modelo (Interactiva)"
)
library(forcats)
plot_gen_dse <- ggplot(loadings_gen_dse,
aes(x = loading,
y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
geom_point(aes(color = '#B42012'), size = 3, alpha = 0.7) +
geom_text(data = labels_gen_dse,
aes(label = CNT),
nudge_y = 0.3,
size = 2.5,
color = "black",
check_overlap = TRUE) +
scale_color_identity(name = "Factor",
guide = "legend",
labels = c("General")) +
labs(title = "Cargas Factoriales: Autoeficacia General",
x = "Carga Factorial Estandarizada",
y = "Ítem") +
theme_minimal(base_size = 10) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
print(plot_gen_dse)
plot_spec_dse <- ggplot(loadings_spec_dse,
aes(x = loading,
y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
geom_point(aes(color = '#E16462'), size = 3, alpha = 0.7) +
geom_text_repel(data = labels_spec_dse,
aes(label = CNT),
size = 2.5,
color = "black",
box.padding = 0.4,
point.padding = 0.2,
min.segment.length = 0,
max.overlaps = Inf) +
scale_color_identity(name = "Factor",
guide = "legend",
labels = c("Especializada")) +
labs(title = "Cargas Factoriales: Autoeficacia Especializada",
x = "Carga Factorial Estandarizada",
y = "Ítem") +
theme_minimal(base_size = 10) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
print(plot_spec_dse)
lista_paises <- unique(unlist(pisa$CNT))
resultados_lista <- list()
summary_lista <- list()
for (pais_actual in lista_paises) {
# Imprimimos el progreso
# cat("Procesando:", pais_actual, "...\n")
datos_pais <- pisa %>%
filter(CNT == pais_actual)
fit_pais <- tryCatch({
sem(model = multigroup_cfa,
data = datos_pais)
}, error = function(e) {
cat("  -> ¡ERROR! No se pudo ajustar el modelo para", pais_actual, ". Razón:", conditionMessage(e), "\n")
return(NULL)
})
if (!is.null(fit_pais)) {
if (lavInspect(fit_pais, "converged")) {
medidas_ajuste <- fitMeasures(fit_pais)
resultados_lista[[pais_actual]] <- medidas_ajuste
cat("  -> Modelo ajustado y resultados guardados.\n")
} else {
cat("  -> ¡ADVERTENCIA! El modelo para", pais_actual, "no convergió. Se omitirán sus resultados.\n")
resultados_lista[[pais_actual]] <- rep(NA)
}
}
}
# cat("\n...Proceso de ajuste finalizado.\n")
lista_paises <- unique(unlist(pisa$CNT))
resultados_lista <- list()
summary_lista <- list()
for (pais_actual in lista_paises) {
# Imprimimos el progreso
# cat("Procesando:", pais_actual, "...\n")
datos_pais <- pisa %>%
filter(CNT == pais_actual)
fit_pais <- tryCatch({
sem(model = multigroup_cfa,
data = datos_pais)
}, error = function(e) {
cat("  -> ¡ERROR! No se pudo ajustar el modelo para", pais_actual, ". Razón:", conditionMessage(e), "\n")
return(NULL)
})
if (!is.null(fit_pais)) {
if (lavInspect(fit_pais, "converged")) {
medidas_ajuste <- fitMeasures(fit_pais)
resultados_lista[[pais_actual]] <- medidas_ajuste
# cat("  -> Modelo ajustado y resultados guardados.\n")
} else {
cat("  -> ¡ADVERTENCIA! El modelo para", pais_actual, "no convergió. Se omitirán sus resultados.\n")
resultados_lista[[pais_actual]] <- rep(NA)
}
}
}
# cat("\n...Proceso de ajuste finalizado.\n")
fit_indices_por_pais <- do.call(rbind, resultados_lista)
fit_indices_por_pais <- as.data.frame(fit_indices_por_pais)
fit_indices_por_pais <- fit_indices_por_pais %>%
tibble::rownames_to_column(var = "CNT")
indices_ajuste <- fit_indices_por_pais %>%
select(CNT, chisq, df, rmsea, rmsea.ci.lower,  rmsea.ci.upper, srmr, cfi, tli)
#| label: tabla-interactiva
#| echo: false
datatable(
indices_ajuste,
options = list(
pageLength = 10,
autoWidth = TRUE,
searchHighlight = TRUE
),
filter = 'top',
rownames = FALSE,
caption = "Índices de Ajuste del Modelo (Interactiva)"
)
table1::table1(~ .,data=indices_ajuste)
table1::table1(~ -CNT + .,data=indices_ajuste)
table1::table1(~ -CNT + .,data=indices_ajuste)
table1::table1(~ . + -CNT,data=indices_ajuste)
#| label: tabla-interactiva
#| echo: false
datatable(
indices_ajuste,
options = list(
pageLength = 10,
autoWidth = TRUE,
searchHighlight = TRUE
),
filter = 'top',
rownames = FALSE,
caption = "Índices de Ajuste del Modelo (Interactiva)"
)
table1::table1(~ . + -CNT,data=indices_ajuste)
