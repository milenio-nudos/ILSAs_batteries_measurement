BSGDNKI3$pais <- "Dinamarca"
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGAUTI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGAZEI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGBFLI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGBIHI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGCHLI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGCYPI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGCZEI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGDEUI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGDNKI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGDNWI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGESPI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGFINI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGFRAI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGGRCI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGHRVI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGHUNI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGITAI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGKAZI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGKORI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGLUXI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGLVAI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGMLTI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGNLDI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGNORI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGOMNI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGPRTI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGROUI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGSRBI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGSVKI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGSVNI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGSWEI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGTWNI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGURYI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGUSAI3.Rdata")
load("~/GitHub/ILSAs_batteries_measurement/input/df_countries/BSGXKXI3.Rdata")
icils_2023 <- rbind(BSGAUTI3, BSGAZEI3, BSGBFLI3, BSGBIHI3, BSGCHLI3, BSGCYPI3, BSGCZEI3, BSGDEUI3,
BSGDNKI3, BSGDNWI3, BSGESPI3, BSGFINI3, BSGFRAI3, BSGGRCI3, BSGHRVI3, BSGHUNI3,
BSGITAI3, BSGKAZI3, BSGKORI3, BSGLUXI3, BSGLVAI3, BSGMLTI3, BSGNLDI3, BSGNORI3,
BSGOMNI3, BSGPRTI3, BSGROUI3, BSGSRBI3, BSGSVKI3, BSGSVNI3, BSGSWEI3, BSGTWNI3,
BSGURYI3, BSGUSAI3, BSGXKXI3)
icils_2023_proc <- icils_2023 %>%
select(IS3G24A, IS3G24B, IS3G24C, IS3G24D, IS3G24E, IS3G24F, IS3G24G, IS3G24H, IS3G24I, IS3G24J,
IS3G24K, IS3G24L, IS3G24M)
pacman::p_load(dplyr, haven,sjlabelled, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, car, beeswarm, lme4)
options(scipen = 999)
rm(list = ls())
icils_2023 <- readRDS("../proc/icils_2023_proc.rds")
summary(icils_2023)
View(BSGAUTI3)
View(BSGAZEI3)
rm(icils_2023)
rm(icils_2023_proc)
View(BSGAUTI3)
View(BSGAUTI3)
icils_2023_proc <- icils_2023 %>%
select(CNTRY, IDSCHOOL, IS3G24A, IS3G24B, IS3G24C, IS3G24D, IS3G24E, IS3G24F, IS3G24G, IS3G24H, IS3G24I, IS3G24J,
IS3G24K, IS3G24L, IS3G24M)
pacman::p_load(dplyr, haven,sjlabelled, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, car, beeswarm, lme4)
options(scipen = 999)
icils_2023_proc <- icils_2023 %>%
select(CNTRY, IDSCHOOL, IS3G24A, IS3G24B, IS3G24C, IS3G24D, IS3G24E, IS3G24F, IS3G24G, IS3G24H, IS3G24I, IS3G24J,
IS3G24K, IS3G24L, IS3G24M)
icils_2023 <- rbind(BSGAUTI3, BSGAZEI3, BSGBFLI3, BSGBIHI3, BSGCHLI3, BSGCYPI3, BSGCZEI3, BSGDEUI3,
BSGDNKI3, BSGDNWI3, BSGESPI3, BSGFINI3, BSGFRAI3, BSGGRCI3, BSGHRVI3, BSGHUNI3,
BSGITAI3, BSGKAZI3, BSGKORI3, BSGLUXI3, BSGLVAI3, BSGMLTI3, BSGNLDI3, BSGNORI3,
BSGOMNI3, BSGPRTI3, BSGROUI3, BSGSRBI3, BSGSVKI3, BSGSVNI3, BSGSWEI3, BSGTWNI3,
BSGURYI3, BSGUSAI3, BSGXKXI3)
icils_2023_proc <- icils_2023 %>%
select(CNTRY, IDSCHOOL, IS3G24A, IS3G24B, IS3G24C, IS3G24D, IS3G24E, IS3G24F, IS3G24G, IS3G24H, IS3G24I, IS3G24J,
IS3G24K, IS3G24L, IS3G24M)
View(icils_2023_proc)
# Revisar las categorias de respuesta para poder agrupar los NA
sjlabelled::get_labels(icils_2023_proc)
icils_2023_proc$IS3G24A <- recode(icils_2023_proc$IS3G24A, "c(8,9)=NA")
icils_2023_proc$IS3G24B <- recode(icils_2023_proc$IS3G24B, "c(8,9)=NA")
icils_2023_proc$IS3G24C <- recode(icils_2023_proc$IS3G24C, "c(8,9)=NA")
icils_2023_proc$IS3G24D <- recode(icils_2023_proc$IS3G24D, "c(8,9)=NA")
icils_2023_proc$IS3G24E <- recode(icils_2023_proc$IS3G24E, "c(8,9)=NA")
icils_2023_proc$IS3G24F <- recode(icils_2023_proc$IS3G24F, "c(8,9)=NA")
icils_2023_proc$IS3G24G <- recode(icils_2023_proc$IS3G24G, "c(8,9)=NA")
icils_2023_proc$IS3G24H <- recode(icils_2023_proc$IS3G24H, "c(8,9)=NA")
icils_2023_proc$IS3G24I <- recode(icils_2023_proc$IS3G24I, "c(8,9)=NA")
icils_2023_proc$IS3G24J <- recode(icils_2023_proc$IS3G24J, "c(8,9)=NA")
icils_2023_proc$IS3G24K <- recode(icils_2023_proc$IS3G24K, "c(8,9)=NA")
icils_2023_proc$IS3G24L <- recode(icils_2023_proc$IS3G24L, "c(8,9)=NA")
icils_2023_proc$IS3G24M <- recode(icils_2023_proc$IS3G24M, "c(8,9)=NA")
saveRDS(icils_2023_proc, "../proc/icils_2023_proc.rds")
rm(list = ls())
icils_2023 <- readRDS("../proc/icils_2023_proc.rds")
summary(icils_2023)
apply(IS3G24A = is.na(icils_2023), MARGIN = 2, FUN = sum)
apply(icils2023$IS3G24A = is.na(icils_2023), MARGIN = 2, FUN = sum)
apply(icils_2023$IS3G24A = is.na(icils_2023), MARGIN = 2, FUN = sum)
apply(X = is.na(icils_2023), MARGIN = 2, FUN = sum)
pacman::p_load(dplyr, haven,sjlabelled, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, car, beeswarm, lme4)
options(scipen = 999)
summary(icils_2023_proc)
View(icils_2023_proc)
rm(icils_2023_proc)
icils_2023_proc <- icils_2023 %>%
select(CNTRY, IDSCHOOL, IS3G24A, IS3G24B, IS3G24C, IS3G24D, IS3G24E, IS3G24F, IS3G24G, IS3G24H, IS3G24I, IS3G24J,
IS3G24K, IS3G24L, IS3G24M)
View(icils_2023_proc)
# Revisar las categorias de respuesta para poder agrupar los NA
sjlabelled::get_labels(icils_2023_proc)
icils_2023_proc$IS3G24A <- recode(icils_2023_proc$IS3G24A, "c(8,9)=NA")
icils_2023_proc$IS3G24B <- recode(icils_2023_proc$IS3G24B, "c(8,9)=NA")
icils_2023_proc$IS3G24C <- recode(icils_2023_proc$IS3G24C, "c(8,9)=NA")
icils_2023_proc$IS3G24D <- recode(icils_2023_proc$IS3G24D, "c(8,9)=NA")
icils_2023_proc$IS3G24E <- recode(icils_2023_proc$IS3G24E, "c(8,9)=NA")
icils_2023_proc$IS3G24F <- recode(icils_2023_proc$IS3G24F, "c(8,9)=NA")
icils_2023_proc$IS3G24G <- recode(icils_2023_proc$IS3G24G, "c(8,9)=NA")
icils_2023_proc$IS3G24H <- recode(icils_2023_proc$IS3G24H, "c(8,9)=NA")
icils_2023_proc$IS3G24I <- recode(icils_2023_proc$IS3G24I, "c(8,9)=NA")
icils_2023_proc$IS3G24J <- recode(icils_2023_proc$IS3G24J, "c(8,9)=NA")
icils_2023_proc$IS3G24K <- recode(icils_2023_proc$IS3G24K, "c(8,9)=NA")
icils_2023_proc$IS3G24L <- recode(icils_2023_proc$IS3G24L, "c(8,9)=NA")
icils_2023_proc$IS3G24M <- recode(icils_2023_proc$IS3G24M, "c(8,9)=NA")
saveRDS(icils_2023_proc, "../proc/icils_2023_proc.rds")
rm(icils_2023_proc)
saveRDS(icils_2023_proc, "../proc/icils_2023_proc.rds")
saveRDS(icils_2023_proc, "../proc/icils_2023_proc.rds")
icils_2023_proc <- icils_2023 %>%
select(CNTRY, IDSCHOOL, IS3G24A, IS3G24B, IS3G24C, IS3G24D, IS3G24E, IS3G24F, IS3G24G, IS3G24H, IS3G24I, IS3G24J,
IS3G24K, IS3G24L, IS3G24M)
# Revisar las categorias de respuesta para poder agrupar los NA
sjlabelled::get_labels(icils_2023_proc)
icils_2023_proc$IS3G24A <- recode(icils_2023_proc$IS3G24A, "c(8,9)=NA")
icils_2023_proc$IS3G24B <- recode(icils_2023_proc$IS3G24B, "c(8,9)=NA")
icils_2023_proc$IS3G24C <- recode(icils_2023_proc$IS3G24C, "c(8,9)=NA")
icils_2023_proc$IS3G24D <- recode(icils_2023_proc$IS3G24D, "c(8,9)=NA")
icils_2023_proc$IS3G24E <- recode(icils_2023_proc$IS3G24E, "c(8,9)=NA")
icils_2023_proc$IS3G24F <- recode(icils_2023_proc$IS3G24F, "c(8,9)=NA")
icils_2023_proc$IS3G24G <- recode(icils_2023_proc$IS3G24G, "c(8,9)=NA")
icils_2023_proc$IS3G24H <- recode(icils_2023_proc$IS3G24H, "c(8,9)=NA")
icils_2023_proc$IS3G24I <- recode(icils_2023_proc$IS3G24I, "c(8,9)=NA")
icils_2023_proc$IS3G24J <- recode(icils_2023_proc$IS3G24J, "c(8,9)=NA")
icils_2023_proc$IS3G24K <- recode(icils_2023_proc$IS3G24K, "c(8,9)=NA")
icils_2023_proc$IS3G24L <- recode(icils_2023_proc$IS3G24L, "c(8,9)=NA")
icils_2023_proc$IS3G24M <- recode(icils_2023_proc$IS3G24M, "c(8,9)=NA")
saveRDS(icils_2023_proc, "../proc/icils_2023_proc.rds")
saveRDS(icils_2023_proc, "proc/icils_2023_proc.rds")
summary(icils_2023_proc)
View(icils_2023_proc)
BSGDEUI3 <- BSGDEUI3 %>%
select(CNTRY, IDSCHOOL, IS3G24A, IS3G24B, IS3G24C, IS3G24D, IS3G24E, IS3G24F, IS3G24G, IS3G24H, IS3G24I, IS3G24J,
IS3G24K, IS3G24L, IS3G24M)
BSGDEUI3$IS3G24A <- recode(BSGDEUI3$IS3G24A, "c(8,9)=NA")
BSGDEUI3$IS3G24B <- recode(BSGDEUI3$IS3G24B, "c(8,9)=NA")
BSGDEUI3$IS3G24C <- recode(BSGDEUI3$IS3G24C, "c(8,9)=NA")
BSGDEUI3$IS3G24D <- recode(BSGDEUI3$IS3G24D, "c(8,9)=NA")
BSGDEUI3$IS3G24E <- recode(BSGDEUI3$IS3G24E, "c(8,9)=NA")
BSGDEUI3$IS3G24F <- recode(BSGDEUI3$IS3G24F, "c(8,9)=NA")
BSGDEUI3$IS3G24G <- recode(BSGDEUI3$IS3G24G, "c(8,9)=NA")
BSGDEUI3$IS3G24H <- recode(BSGDEUI3$IS3G24H, "c(8,9)=NA")
BSGDEUI3$IS3G24I <- recode(BSGDEUI3$IS3G24I, "c(8,9)=NA")
BSGDEUI3$IS3G24J <- recode(BSGDEUI3$IS3G24J, "c(8,9)=NA")
BSGDEUI3$IS3G24K <- recode(BSGDEUI3$IS3G24K, "c(8,9)=NA")
BSGDEUI3$IS3G24L <- recode(BSGDEUI3$IS3G24L, "c(8,9)=NA")
BSGDEUI3$IS3G24M <- recode(BSGDEUI3$IS3G24M, "c(8,9)=NA")
summary(BSGDEUI3)
BSGESPI3 <- BSGESPI3 %>%
select(CNTRY, IDSCHOOL, IS3G24A, IS3G24B, IS3G24C, IS3G24D, IS3G24E, IS3G24F, IS3G24G, IS3G24H, IS3G24I, IS3G24J,
IS3G24K, IS3G24L, IS3G24M)
BSGESPI3$IS3G24A <- recode(BSGESPI3$IS3G24A, "c(8,9)=NA")
BSGESPI3$IS3G24B <- recode(BSGESPI3$IS3G24B, "c(8,9)=NA")
BSGESPI3$IS3G24C <- recode(BSGESPI3$IS3G24C, "c(8,9)=NA")
BSGESPI3$IS3G24D <- recode(BSGESPI3$IS3G24D, "c(8,9)=NA")
BSGESPI3$IS3G24E <- recode(BSGESPI3$IS3G24E, "c(8,9)=NA")
BSGESPI3$IS3G24F <- recode(BSGESPI3$IS3G24F, "c(8,9)=NA")
BSGESPI3$IS3G24G <- recode(BSGESPI3$IS3G24G, "c(8,9)=NA")
BSGESPI3$IS3G24H <- recode(BSGESPI3$IS3G24H, "c(8,9)=NA")
BSGESPI3$IS3G24I <- recode(BSGESPI3$IS3G24I, "c(8,9)=NA")
BSGESPI3$IS3G24J <- recode(BSGESPI3$IS3G24J, "c(8,9)=NA")
BSGESPI3$IS3G24K <- recode(BSGESPI3$IS3G24K, "c(8,9)=NA")
BSGESPI3$IS3G24L <- recode(BSGESPI3$IS3G24L, "c(8,9)=NA")
BSGESPI3$IS3G24M <- recode(BSGESPI3$IS3G24M, "c(8,9)=NA")
summary(BSGESPI3)
summary(icils_2023_proc)
rm(list = ls())
rm(list = ls())
pacman::p_load(dplyr, haven,sjlabelled, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, car, beeswarm, lme4)
options(scipen = 999)
pisa_2022 <- read_sav(data/raw_data/pisa_2022.sav)
pisa_2022 <- read_sav("data/raw_data/pisa_2022.sav")
View(pisa_2022)
View(pisa_2022)
View(pisa_2022)
View(pisa_2022)
pisa_2022_proc <- pisa_2022 %>%
filter(Option_ICTQ == 1) %>%
select(CNT, CNTRYID, CNTSCHID, IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA,
IC183Q05JA, IC183Q06JA, IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA,
IC183Q11JA, IC183Q12JA, IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)
pisa_2022_proc <- pisa_2022 %>%
filter(Option_ICTQ == 1) %>%
select(CNT, CNTRYID, CNTSCHID, IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA,
IC183Q05JA, IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA,
IC183Q12JA, IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)
pacman::p_load(dplyr, haven,sjlabelled, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, car, beeswarm, lme4)
options(scipen = 999)
rm(list = ls())
icils_2023 <- readRDS("proc/icils_2023_proc.rds")
icils_2023 <- readRDS("data/proc_data/icils_2023_proc.rds")
summary(icils_2023_proc)
summary(icils_2023)
print(unique(icils_2023&CNTRY))
print(unique(icils_2023$CNTRY))
View(icils_2023)
pacman::p_load(dplyr, haven,sjlabelled, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, car, beeswarm, lme4)
options(scipen = 999)
rm(list = ls())
icils_2023 <- readRDS("data/proc_data/icils_2023_proc.rds")
data_long <- icils_2023 %>%
select(CNTRY, all_of(item_cols)) %>%
pivot_longer(cols = all_of(item_cols),
names_to = "Item",
values_to = "Valor")
item_cols <- c("IS3G24A", "IS3G24B", "IS3G24C", "IS3G24D", "IS3G24E",
"IS3G24F", "IS3G24G", "IS3G24H", "IS3G24I", "IS3G24J",
"IS3G24K", "IS3G24L", "IS3G24M")
data_long <- icils_2023 %>%
select(CNTRY, all_of(item_cols)) %>%
pivot_longer(cols = all_of(item_cols),
names_to = "Item",
values_to = "Valor")
View(data_long)
prop_na_pais_item <- data_long %>%
group_by(CNTRY, Item) %>%
summarise(
Total = n(),
NAs = sum(is.na(Valor)),
Prop_NA = NAs / Total,
.groups = "drop" # Elimina la estructura de agrupación
)
View(prop_na_pais_item)
prop_na_general_item <- data_long %>%
group_by(Item) %>%
summarise(
Total_General = n(),
NAs_General = sum(is.na(Valor)),
Prop_NA_General = NAs_General / Total_General,
.groups = "drop"
)
View(prop_na_general_item)
pacman::p_load(
dplyr,
haven,
sjlabelled,
psych,
purrr,
tidyr,
sjPlot,
ggplot2,
parameters,
table1,
car,
beeswarm,
lme4,
scales,
ggrepel
)
options(scipen = 999)
rm(list = ls())
icils_2023 <- readRDS("data/proc_data/icils_2023_proc.rds")
item_cols <- c("IS3G24A", "IS3G24B", "IS3G24C", "IS3G24D", "IS3G24E",
"IS3G24F", "IS3G24G", "IS3G24H", "IS3G24I", "IS3G24J",
"IS3G24K", "IS3G24L", "IS3G24M")
print(class(icils_2023$IS3G24C))
icils_2023$CNTRY <- haven::as_factor(icils_2023$CNTRY)
icils_2023$CNTRY <- haven::as_factor(icils_2023$CNTRY)
print(class(icils_2023$IS3G24C))
grafico_cleveland_nas <- ggplot(prop_na_pais_item, aes(x = Prop_NA, y = Item)) +
# Puntos para cada país
geom_point(aes(color = "País"), alpha = 0.7, size = 2) +
# Punto para el promedio general del item
geom_point(data = prop_na_general_item,
aes(x = Prop_NA_General, y = Item, color = "Promedio General (Item)"),
size = 4, shape = 18) + # Usamos una forma diferente (diamante)
# Etiquetas para los 3 países con más NAs por item
# Pasamos 'data_for_labels' al argumento 'data' de esta capa específica
geom_text_repel(data = data_for_labels,
aes(label = CNTRY), # Usamos directamente la columna CNTRY
size = 2.8,
max.overlaps = Inf,
box.padding = 0.4,
point.padding = 0.2,
segment.color = 'grey50',
segment.size = 0.3,
min.segment.length = 0
) +
# Escalas y etiquetas
scale_x_continuous(labels = percent_format(accuracy = 1),
name = "% de NAs") +
scale_y_discrete(name = "Ítem de Autoeficacia Digital") +
scale_color_manual(name = "Referencia:",
values = c("País" = "steelblue", "Promedio General (Item)" = "red"),
guide = guide_legend(override.aes = list(shape = c(16, 18), size = c(2,4)))) +
# Título y tema
labs(title = "Proporción de NAs por País en Items de Autoeficacia Digital",
subtitle = "Se etiquetan los 3 países con mayor % de NAs para cada ítem.",
caption = "Datos: ICILS 2023 (simulados para este ejemplo)") +
theme_minimal(base_size = 11) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = element_text(size=9),
axis.text.x = element_text(size=9)
)
data_long <- icils_2023 %>%
select(CNTRY, all_of(item_cols)) %>%
pivot_longer(cols = all_of(item_cols),
names_to = "Item",
values_to = "Valor")
prop_na_pais_item <- data_long %>%
group_by(CNTRY, Item) %>%
summarise(
Total = n(),
NAs = sum(is.na(Valor)),
Prop_NA = NAs / Total,
.groups = "drop"
)
prop_na_general_item <- data_long %>%
group_by(Item) %>%
summarise(
Total_General = n(),
NAs_General = sum(is.na(Valor)),
Prop_NA_General = NAs_General / Total_General,
.groups = "drop"
)
data_for_labels <- prop_na_pais_item %>%
group_by(Item) %>%
slice_max(order_by = Prop_NA, n = 3, with_ties = FALSE) %>% # with_ties=FALSE para asegurar solo 3
ungroup()
grafico_cleveland_nas <- ggplot(prop_na_pais_item, aes(x = Prop_NA, y = Item)) +
# Puntos para cada país
geom_point(aes(color = "País"), alpha = 0.7, size = 2) +
# Punto para el promedio general del item
geom_point(data = prop_na_general_item,
aes(x = Prop_NA_General, y = Item, color = "Promedio General (Item)"),
size = 4, shape = 18) + # Usamos una forma diferente (diamante)
# Etiquetas para los 3 países con más NAs por item
# Pasamos 'data_for_labels' al argumento 'data' de esta capa específica
geom_text_repel(data = data_for_labels,
aes(label = CNTRY), # Usamos directamente la columna CNTRY
size = 2.8,
max.overlaps = Inf,
box.padding = 0.4,
point.padding = 0.2,
segment.color = 'grey50',
segment.size = 0.3,
min.segment.length = 0
) +
# Escalas y etiquetas
scale_x_continuous(labels = percent_format(accuracy = 1),
name = "% de NAs") +
scale_y_discrete(name = "Ítem de Autoeficacia Digital") +
scale_color_manual(name = "Referencia:",
values = c("País" = "steelblue", "Promedio General (Item)" = "red"),
guide = guide_legend(override.aes = list(shape = c(16, 18), size = c(2,4)))) +
# Título y tema
labs(title = "Proporción de NAs por País en Items de Autoeficacia Digital",
subtitle = "Se etiquetan los 3 países con mayor % de NAs para cada ítem.",
caption = "Datos: ICILS 2023 (simulados para este ejemplo)") +
theme_minimal(base_size = 11) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = element_text(size=9),
axis.text.x = element_text(size=9)
)
print(grafico_cleveland_nas)
View(prop_na_pais_item)
prop_na_pais_item$Item <- factor(prop_na_pais_item$Item, levels = rev(item_cols))
prop_na_general_item$Item <- factor(prop_na_general_item$Item, levels = rev(item_cols))
data_for_labels$Item <- factor(data_for_labels$Item, levels = rev(item_cols))
grafico_cleveland_nas <- ggplot(prop_na_pais_item, aes(x = Prop_NA, y = Item)) +
# Puntos para cada país
geom_point(aes(color = "País"), alpha = 0.7, size = 2) +
# Punto para el promedio general del item
geom_point(data = prop_na_general_item,
aes(x = Prop_NA_General, y = Item, color = "Promedio General (Item)"),
size = 4, shape = 18) + # Usamos una forma diferente (diamante)
# Etiquetas para los 3 países con más NAs por item
# Pasamos 'data_for_labels' al argumento 'data' de esta capa específica
geom_text_repel(data = data_for_labels,
aes(label = CNTRY), # Usamos directamente la columna CNTRY
size = 2.8,
max.overlaps = Inf,
box.padding = 0.4,
point.padding = 0.2,
segment.color = 'grey50',
segment.size = 0.3,
min.segment.length = 0
) +
# Escalas y etiquetas
scale_x_continuous(labels = percent_format(accuracy = 1),
name = "% de NAs") +
scale_y_discrete(name = "Ítem de Autoeficacia Digital") +
scale_color_manual(name = "Referencia:",
values = c("País" = "steelblue", "Promedio General (Item)" = "red"),
guide = guide_legend(override.aes = list(shape = c(16, 18), size = c(2,4)))) +
# Título y tema
labs(title = "Proporción de NAs por País en Items de Autoeficacia Digital",
subtitle = "Se etiquetan los 3 países con mayor % de NAs para cada ítem.",
caption = "Datos: ICILS 2023") +
theme_minimal(base_size = 11) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = element_text(size=9),
axis.text.x = element_text(size=9)
)
print(grafico_cleveland_nas)
pacman::p_load(
dplyr,
haven,
sjlabelled,
psych,
purrr,
tidyr,
sjPlot,
ggplot2,
parameters,
table1,
car,
beeswarm,
lme4,
scales,
ggrepel
)
options(scipen = 999)
rm(list = ls())
icils_2023 <- readRDS("data/proc_data/icils_2023_proc.rds")
item_cols <- c("IS3G24A", "IS3G24B", "IS3G24C", "IS3G24D", "IS3G24E",
"IS3G24F", "IS3G24G", "IS3G24H", "IS3G24I", "IS3G24J",
"IS3G24K", "IS3G24L", "IS3G24M")
icils_2023$CNTRY <- haven::as_factor(icils_2023$CNTRY)
data_long <- icils_2023 %>%
select(CNTRY, all_of(item_cols)) %>%
pivot_longer(cols = all_of(item_cols),
names_to = "Item",
values_to = "Valor")
View(icils_2023)
View(data_long)
prop_na_pais_item <- data_long %>%
group_by(CNTRY, Item) %>%
summarise(
Total = n(),
NAs = sum(is.na(Valor)),
Prop_NA = NAs / Total,
.groups = "drop"
)
View(prop_na_pais_item)
prop_na_general_item <- data_long %>%
group_by(Item) %>%
summarise(
Total_General = n(),
NAs_General = sum(is.na(Valor)),
Prop_NA_General = NAs_General / Total_General,
.groups = "drop"
)
data_for_labels <- prop_na_pais_item %>%
group_by(Item) %>%
slice_max(order_by = Prop_NA, n = 3, with_ties = FALSE) %>% # with_ties=FALSE para asegurar solo 3
ungroup()
prop_na_pais_item$Item <- factor(prop_na_pais_item$Item, levels = rev(item_cols))
prop_na_general_item$Item <- factor(prop_na_general_item$Item, levels = rev(item_cols))
data_for_labels$Item <- factor(data_for_labels$Item, levels = rev(item_cols))
grafico_cleveland_nas <- ggplot(prop_na_pais_item, aes(x = Prop_NA, y = Item)) +
# Puntos para cada país
geom_point(aes(color = "País"), alpha = 0.7, size = 2) +
# Punto para el promedio general del item
geom_point(data = prop_na_general_item,
aes(x = Prop_NA_General, y = Item, color = "Promedio General (Item)"),
size = 4, shape = 18) + # Usamos una forma diferente (diamante)
# Etiquetas para los 3 países con más NAs por item
# Pasamos 'data_for_labels' al argumento 'data' de esta capa específica
geom_text_repel(data = data_for_labels,
aes(label = CNTRY), # Usamos directamente la columna CNTRY
size = 2.8,
max.overlaps = Inf,
box.padding = 0.4,
point.padding = 0.2,
segment.color = 'grey50',
segment.size = 0.3,
min.segment.length = 0
) +
# Escalas y etiquetas
scale_x_continuous(labels = percent_format(accuracy = 1),
name = "% de NAs") +
scale_y_discrete(name = "Ítem de Autoeficacia Digital") +
scale_color_manual(name = "Referencia:",
values = c("País" = "steelblue", "Promedio General (Item)" = "red"),
guide = guide_legend(override.aes = list(shape = c(16, 18), size = c(2,4)))) +
# Título y tema
labs(title = "Proporción de NAs por País en Items de Autoeficacia Digital",
subtitle = "Se etiquetan los 3 países con mayor % de NAs para cada ítem.",
caption = "Datos: ICILS 2023") +
theme_minimal(base_size = 11) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
axis.text.y = element_text(size=9),
axis.text.x = element_text(size=9)
)
print(grafico_cleveland_nas)
