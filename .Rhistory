#    spec_dse = ~ create_program + identify_error + logical_solution
#  '
#| label: modelo confirmatorio multigrupo
fitgroup <- sem(model = multigroup_cfa, data = pisa, group = "CNT", missing = "fiml")
#| label: libraries
#| echo: false
pacman::p_load(
dplyr, haven, sjlabelled,  psych,  purrr,  tidyr,  sjPlot,  ggplot2,
parameters,  table1,  car,  beeswarm,  lme4, scales, ggrepel, corrplot,
ggtext, patchwork, lavaan, semTools, DT)
options(scipen = 999)
rm(list = ls())
#| label: data
#| echo: false
icils <- readRDS("./data/proc_data/icils23_proc.rds")
pisa <- readRDS("./data/proc_data/pisa22_proc.rds")
#| label: select variables
#| include: false
pisa <- pisa %>%
select(search_info, asses_info, share_info, pair_collab, how_to_share,
edit_text, collect_data, create_pres, page_web, change_settings,
select_app, create_program, identify_error, logical_solution, CNT)
#| label: Measurement model
model_cfa <- '
gen_dse = ~ asses_info + share_info + pair_collab + how_to_share +
edit_text
spec_dse = ~ create_program + identify_error + logical_solution
'
m_cfa <- cfa(model = model_cfa,
data = pisa,
estimator = "DWLS",
ordered = T,
std.lv = F)
summary(m_cfa)
#| label: tbl-fit-pisa
#| tbl-cap: PISA Fit measures
#| tbl-cap-location: bottom
#| echo: true
fit_pisa <- fitMeasures(m_cfa,
c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
knitr::kable(fit_pisa, digits = 3)
#| label: Multigroup
multigroup_cfa <- '
gen_dse = ~ asses_info + share_info + pair_collab + how_to_share +
edit_text
spec_dse = ~ create_program + identify_error + logical_solution
'
#'
#    gen_dse = ~ search_info + asses_info + share_info + pair_collab + #how_to_share +
#         edit_text + collect_data + create_pres + change_settings + #select_app
#    spec_dse = ~ create_program + identify_error + logical_solution
#  '
#| label: modelo confirmatorio multigrupo
fitgroup <- sem(model = multigroup_cfa, data = pisa, group = "CNT", missing = "fiml")
all_params <- parameterEstimates(fitgroup, standardized = TRUE)
factor_loadings_all_groups <- all_params %>%
filter(op == "=~")
group_labels <- lavInspect(fitgroup, "group.label")
country_map <- data.frame(group = 1:length(group_labels), CNT = unlist(group_labels))
factor_loadings_all_groups <- factor_loadings_all_groups %>%
left_join(country_map, by = "group")
fit_pisa_group <- fitMeasures(m_cfa,
c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
knitr::kable(fit_pisa_group, digits = 3)
fit_pisa_group <- fitMeasures(fitgroup,
c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
knitr::kable(fit_pisa_group, digits = 3)
all_params <- parameterEstimates(fitgroup, standardized = TRUE)
factor_loadings_all_groups <- all_params %>%
filter(op == "=~")
group_labels <- lavInspect(fitgroup, "group.label")
country_map <- data.frame(group = 1:length(group_labels), CNT = unlist(group_labels))
factor_loadings_all_groups <- factor_loadings_all_groups %>%
left_join(country_map, by = "group")
loadings_gen_dse <- factor_loadings_all_groups %>%
filter(lhs == "gen_dse") %>%
select(CNT, item = rhs, loading = std.all, latent_factor = lhs)
labels_gen_dse <- loadings_gen_dse %>%
group_by(item) %>%
slice_min(order_by = loading, n = 3) %>%
ungroup()
loadings_spec_dse <- factor_loadings_all_groups %>%
filter(lhs == "spec_dse") %>%
select(CNT, item = rhs, loading = std.all, latent_factor = lhs)
labels_spec_dse <- loadings_spec_dse %>%
group_by(item) %>%
slice_min(order_by = loading, n = 3) %>%
ungroup()
library(forcats)
plot_gen_dse <- ggplot(loadings_gen_dse,
aes(x = loading,
y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
geom_point(aes(color = '#B42012'), size = 3, alpha = 0.7) +
geom_text(data = labels_gen_dse,
aes(label = CNT),
nudge_y = 0.3,
size = 2.5,
color = "black",
check_overlap = TRUE) +
scale_color_identity(name = "Factor",
guide = "legend",
labels = c("General")) +
labs(title = "Cargas Factoriales: Autoeficacia General",
x = "Carga Factorial Estandarizada",
y = "Ítem") +
theme_minimal(base_size = 10) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
print(plot_gen_dse)
plot_spec_dse <- ggplot(loadings_spec_dse,
aes(x = loading,
y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
geom_point(aes(color = '#E16462'), size = 3, alpha = 0.7) +
geom_text_repel(data = labels_spec_dse,
aes(label = CNT),
size = 2.5,
color = "black",
box.padding = 0.4,
point.padding = 0.2,
min.segment.length = 0,
max.overlaps = Inf) +
scale_color_identity(name = "Factor",
guide = "legend",
labels = c("Especializada")) +
labs(title = "Cargas Factoriales: Autoeficacia Especializada",
x = "Carga Factorial Estandarizada",
y = "Ítem") +
theme_minimal(base_size = 10) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
print(plot_spec_dse)
library(forcats)
plot_gen_dse <- ggplot(loadings_gen_dse,
aes(x = loading,
y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
geom_point(aes(color = '#B42012'), size = 3, alpha = 0.7) +
geom_text(data = labels_gen_dse,
aes(label = CNT),
nudge_y = 0.3,
size = 2.5,
color = "black",
check_overlap = TRUE) +
scale_color_identity(name = "Factor",
guide = "legend",
labels = c("General")) +
labs(title = "Cargas Factoriales: Autoeficacia General",
x = "Carga Factorial Estandarizada",
y = "Ítem") +
theme_minimal(base_size = 10) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
print(plot_gen_dse)
lista_paises <- unique(unlist(pisa$CNT))
resultados_lista <- list()
summary_lista <- list()
for (pais_actual in lista_paises) {
# Imprimimos el progreso
# cat("Procesando:", pais_actual, "...\n")
datos_pais <- pisa %>%
filter(CNT == pais_actual)
fit_pais <- tryCatch({
sem(model = multigroup_cfa,
data = datos_pais,
missing = "fiml")
}, error = function(e) {
cat("  -> ¡ERROR! No se pudo ajustar el modelo para", pais_actual, ". Razón:", conditionMessage(e), "\n")
return(NULL)
})
if (!is.null(fit_pais)) {
if (lavInspect(fit_pais, "converged")) {
medidas_ajuste <- fitMeasures(fit_pais)
resultados_lista[[pais_actual]] <- medidas_ajuste
# cat("  -> Modelo ajustado y resultados guardados.\n")
} else {
cat("  -> ¡ADVERTENCIA! El modelo para", pais_actual, "no convergió. Se omitirán sus resultados.\n")
resultados_lista[[pais_actual]] <- rep(NA)
}
}
}
fit_indices_por_pais <- do.call(rbind, resultados_lista)
fit_indices_por_pais <- as.data.frame(fit_indices_por_pais)
fit_indices_por_pais <- fit_indices_por_pais %>%
tibble::rownames_to_column(var = "CNT")
indices_ajuste <- fit_indices_por_pais %>%
select(CNT, chisq, df, rmsea, rmsea.ci.lower,  rmsea.ci.upper, srmr, cfi, tli)
datatable(
indices_ajuste,
options = list(
pageLength = 10,
autoWidth = TRUE,
searchHighlight = TRUE
),
filter = 'top',
rownames = FALSE,
caption = "Índices de Ajuste del Modelo (Interactiva)"
)
table1::table1(~ . + -CNT,data=indices_ajuste)
knitr::kable(fit_pisa_group, digits = 3)
datos_test <- pisa %>%
filter(CNT == "DNW")
sem(model = multigroup_cfa,
data = datos_test,
missing = "fiml")
sem(model = multigroup_cfa,
data = datos_test,
missing = "fiml")
datos_test <- pisa %>%
filter(CNT == "CHL")
sem(model = multigroup_cfa,
data = datos_test,
missing = "fiml")
test_model <- sem(model = multigroup_cfa,
data = datos_test,
missing = "fiml")
fitMeasures(test_model)
datatable(
indices_ajuste,
options = list(
pageLength = 10,
autoWidth = TRUE,
searchHighlight = TRUE
),
filter = 'top',
rownames = FALSE,
caption = "Índices de Ajuste del Modelo (Interactiva)"
)
group_summary <- summary(fitgroup)
View(group_summary)
summary(fitgroup)
summary(fitgroup)
summary_fit$test$stat.group
group_summary$test$stat.group
str(group_summary)
valores_chi <- group_summary$test$standard$stat.group
# 2. Extraer las etiquetas de los grupos (países)
nombres_paises <- group_summary$data$group.label
# 3. Crear un data.frame combinando ambos
df_chi_corregido <- data.frame(
Pais = nombres_paises,
Chi.Cuadrado = valores_chi
)
# 4. Imprimir la tabla final
print(df_chi_corregido)
df_chi <- data.frame(
Pais = nombres_paises,
Chi.Cuadrado = valores_chi
)
knitr::kable(df_chi)
group_summary <- summary(fitgroup)
valores_chi <- group_summary$test$standard$stat.group
nombres_paises <- group_summary$data$group.label
df_chi <- data.frame(
Pais = nombres_paises,
Chi.Cuadrado = valores_chi
)
# 4. Imprimir la tabla final
print(df_chi_corregido)
knitr::kable(df_chi)
group_summary <- summary(fitgroup)
valores_chi <- group_summary$test$standard$stat.group
nombres_paises <- group_summary$data$group.label
df_chi <- data.frame(
Pais = nombres_paises,
Chi.Cuadrado = valores_chi
)
# 4. Imprimir la tabla final
print(df_chi_corregido)
knitr::kable(df_chi)
group_summary <- summary(fitgroup)
valores_chi <- group_summary$test$standard$stat.group
nombres_paises <- group_summary$data$group.label
df_chi <- data.frame(
Pais = nombres_paises,
Chi.Cuadrado = valores_chi
)
# 4. Imprimir la tabla final
print(df_chi_corregido)
knitr::kable(df_chi)
group_summary <- summary(fitgroup)
valores_chi <- group_summary$test$standard$stat.group
nombres_paises <- group_summary$data$group.label
df_chi <- data.frame(
Pais = nombres_paises,
Chi.Cuadrado = valores_chi
)
# 4. Imprimir la tabla final
print(df_chi_corregido)
knitr::kable(df_chi)
group_summary <- summary(fitgroup)
valores_chi <- group_summary$test$standard$stat.group
nombres_paises <- group_summary$data$group.label
df_chi <- data.frame(
Pais = nombres_paises,
Chi.Cuadrado = valores_chi
)
# 4. Imprimir la tabla final
print(df_chi_corregido)
knitr::kable(df_chi)
group_summary <- summary(fitgroup)
valores_chi <- group_summary$test$standard$stat.group
nombres_paises <- group_summary$data$group.label
df_chi <- data.frame(
Pais = nombres_paises,
Chi.Cuadrado = valores_chi
)
# 4. Imprimir la tabla final
print(df_chi_corregido)
knitr::kable(df_chi)
#| label: data
#| echo: false
icils <- readRDS("./data/proc_data/icils23_proc.rds")
pisa <- readRDS("./data/proc_data/pisa22_proc.rds")
datatable(
df_chi,
options = list(
pageLength = 10,
autoWidth = TRUE,
searchHighlight = TRUE
),
filter = 'top',
rownames = FALSE,
caption = "Chi cuadrado por país"
)
#| label: libraries
#| echo: false
pacman::p_load(
dplyr, haven, sjlabelled,  psych,  purrr,  tidyr,  sjPlot,  ggplot2,
parameters,  table1,  car,  beeswarm,  lme4, scales, ggrepel, corrplot,
ggtext, patchwork, lavaan, semTools, DT)
options(scipen = 999)
rm(list = ls())
#| label: data
#| echo: false
icils <- readRDS("./data/proc_data/icils23_proc.rds")
pisa <- readRDS("./data/proc_data/pisa22_proc.rds")
#| label: select variables
#| include: false
pisa <- pisa %>%
select(search_info, asses_info, share_info, pair_collab, how_to_share,
edit_text, collect_data, create_pres, page_web, change_settings,
select_app, create_program, identify_error, logical_solution, CNT)
#| label: Multigroup
multigroup_cfa <- '
gen_dse = ~ asses_info + share_info + pair_collab + how_to_share +
edit_text
spec_dse = ~ create_program + identify_error + logical_solution
'
#'
#    gen_dse = ~ search_info + asses_info + share_info + pair_collab + #how_to_share +
#         edit_text + collect_data + create_pres + change_settings + #select_app
#    spec_dse = ~ create_program + identify_error + logical_solution
#  '
#| label: modelo confirmatorio multigrupo
fitgroup <- sem(model = multigroup_cfa,
data = pisa,
group = "CNT",
ordered = TRUE
#  missing = "fiml"
)
multigroup_cfa <- '
gen_dse = ~ asses_info + share_info + pair_collab + how_to_share +
edit_text
spec_dse = ~ create_program + identify_error + logical_solution
'
#| label: modelo confirmatorio multigrupo
fitgroup <- sem(model = multigroup_cfa,
data = pisa,
group = "CNT",
ordered = TRUE
#  missing = "fiml"
)
fitgroup_metric <- sem(model = multigroup_cfa,
data = pisa,
group = "CNT",
ordered = TRUE,
# missing = "fiml"
group.equal = "loadings")
View(fitgroup)
fitmeasures_config <- fitMeasures(fitgroup,
c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
knitr::kable(fitmeasures_config, digits = 3)
fitgroup_metric <- sem(model = multigroup_cfa,
data = pisa,
group = "CNT",
ordered = TRUE,
# missing = "fiml"
group.equal = "loadings")
fitgroup_scalar <- sem(model = multigroup_cfa,
data = pisa,
group = "CNT",
ordered = TRUE,
#  missing = "fiml",
group.equal = c("loadings", "intercepts"))
#| label: modelo confirmatorio multigrupo
fitgroup <- sem(model = multigroup_cfa,
data = pisa,
group = "CNT",
ordered = TRUE
#  missing = "fiml"
)
fitmeasures_config <- fitMeasures(fitgroup,
c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
fitmeasures_metric <- fitMeasures(fitgroup_metric,
c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
fitmeasures_scalar <- fitMeasures(fitgroup_scalar,
c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
tabla_completa <- data.frame(
Modelo = c("1. Configural", "2. Métrico", "3. Escalar"),
chisq = c(fitmeasures_config["chisq"], fitmeasures_metric["chisq"], fitmeasures_scalar["chisq"]),
df = c(fitmeasures_config["df"], fitmeasures_metric["df"], fitmeasures_scalar["df"]),
CFI = c(fitmeasures_config["cfi"], fitmeasures_metric["cfi"], fitmeasures_scalar["cfi"]),
TLI = c(fitmeasures_config["tli"], fitmeasures_metric["tli"], fitmeasures_scalar["tli"]),
RMSEA = c(fitmeasures_config["rmsea"], fitmeasures_metric["rmsea"], fitmeasures_scalar["rmsea"]),
SRMR = c(fitmeasures_config["srmr"], fitmeasures_metric["srmr"], fitmeasures_scalar["srmr"])
)
View(tabla_completa)
tabla_completa$delta_chisq <- c(NA, diff(tabla_completa$chisq))
tabla_completa$delta_df    <- c(NA, diff(tabla_completa$df))
tabla_completa$delta_CFI   <- c(NA, diff(tabla_completa$CFI))
tabla_completa$delta_RMSEA <- c(NA, diff(tabla_completa$RMSEA))
test_anova <- anova(fitgroup, fitgroup_metric, fitgroup_scalar)
tabla_completa$p_value_delta_chisq <- c(NA, test_anova$`Pr(>Chisq)`)
tabla_completa$p_value_delta_chisq <- test_anova$`Pr(>Chisq)`
View(test_anova)
knitr::kable(
tabla_completa,
digits = 3,
caption = "Comparación de Modelos de Invarianza Métrica",
col.names = c("Modelo", "$\\chi^2$", "df", "CFI", "TLI", "RMSEA", "SRMR", "$\\Delta\\chi^2$", "$\\Delta$df", "$\\Delta$CFI", "$\\Delta$RMSEA", "p-valor ($\\Delta\\chi^2$)")
)
knitr::kable(
tabla_completa,
digits = 5,
caption = "Comparación de Modelos de Invarianza Métrica",
col.names = c("Modelo", "$\\chi^2$", "df", "CFI", "TLI", "RMSEA", "SRMR", "$\\Delta\\chi^2$", "$\\Delta$df", "$\\Delta$CFI", "$\\Delta$RMSEA", "p-valor ($\\Delta\\chi^2$)")
)
knitr::kable(
tabla_completa,
digits = 5,
caption = "Comparación de Modelos de Invarianza Métrica",
col.names = c("Modelo", "$\\chi^2$", "df", "CFI", "TLI", "RMSEA", "SRMR", "$\\Delta\\chi^2$", "$\\Delta$df", "$\\Delta$CFI", "$\\Delta$RMSEA")
)
knitr::kable(
tabla_completa,
digits = 5,
caption = "Comparación de Modelos de Invarianza Métrica",
col.names = c("Modelo", "$\\chi^2$", "df", "CFI", "TLI", "RMSEA", "SRMR", "$\\Delta\\chi^2$", "$\\Delta$df", "$\\Delta$CFI", "$\\Delta$RMSEA")
)
knitr::kable(
tabla_completa,
digits = 5,
caption = "Comparación de Modelos de Invarianza Métrica",
col.names = c("Modelo", "$\\chi^2$", "df", "CFI", "TLI", "RMSEA", "SRMR", "$\\Delta\\chi^2$", "$\\Delta$df", "$\\Delta$CFI", "$\\Delta$RMSEA", "p-valor ($\\Delta\\chi^2$)")
)
#| label: Measurement model
model_cfa <- '
gen_dse = ~ asses_info + share_info + pair_collab + how_to_share +
edit_text
spec_dse = ~ create_program + identify_error + logical_solution
'
m_cfa <- cfa(model = model_cfa,
data = pisa,
ordered = T,
missing = "fiml")
m_cfa <- cfa(model = model_cfa,
data = pisa,
ordered = T)
standardizedsolution(m_cfa) %>%
filter(op == "=~") %>%
select(Factor = lhs, Indicator = rhs, `Loading (DWLS)` = est.std) %>%
kable(format = "markdown", digits = 2)
summary(m_cfa)
m_cfa <- cfa(model = model_cfa,
data = pisa,
estimator = "DWLS",
ordered = T,
std.lv = F)
summary(m_cfa)
standardizedsolution(m_cfa) %>%
filter(op == "=~") %>%
select(Factor = lhs, Indicator = rhs, `Loading (DWLS)` = est.std) %>%
kable(format = "markdown", digits = 2)
standardizedsolution(m_cfa) %>%
filter(op == "=~") %>%
select(Factor = lhs, Indicator = rhs, `Loading (DWLS)` = est.std)
save.image("~/Nudos/ILSAs_batteries_measurement/.RData")
codigo_latex_tabla <- knitr::kable(
tabla_completa,
format = "latex", # <--- ¡Este es el paso clave!
digits = 5,
caption = "Comparación de Modelos de Invarianza Métrica",
col.names = c("Modelo", "$\\chi^2$", "df", "CFI", "TLI", "RMSEA", "SRMR", "$\\Delta\\chi^2$", "$\\Delta$df", "$\\Delta$CFI", "$\\Delta$RMSEA", "p-valor ($\\Delta\\chi^2$)"),
booktabs = TRUE # Usar booktabs = TRUE genera tablas más profesionales en LaTeX
)
# 2. Escribe el código en un archivo .tex
writeLines(codigo_latex_tabla, "mi_tabla_de_invarianza.tex")
# Opcional: Imprime el código en la consola para verlo
print(codigo_latex_tabla)
install.packages("pdfLatex")
fit_pisa_group <- fitMeasures(fitgroup,
c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
all_params <- parameterEstimates(fitgroup, standardized = TRUE)
factor_loadings_all_groups <- all_params %>%
filter(op == "=~")
group_labels <- lavInspect(fitgroup, "group.label")
country_map <- data.frame(group = 1:length(group_labels), CNT = unlist(group_labels))
factor_loadings_all_groups <- factor_loadings_all_groups %>%
left_join(country_map, by = "group")
View(factor_loadings_all_groups)
