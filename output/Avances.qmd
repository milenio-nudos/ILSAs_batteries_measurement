---
title: "Digital self efficacy scale validation analysis: ICILS & PISA
"
subtitle: "Advances"
author: "Tomás Urzúa e Ismael Aguayo"
date: today
lang: en
fontsize: 14pt
format:
  html:
    code-fold: true
    toc: true
    toc-location: left
    toc-depth: 2
    toc-expand: 1
    toc-title: Contenidos
    number-sections: true
    number-depth: 3
    theme:
      - united
    code-link: true
    title-block-banner: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: libraries
#| echo: false 

pacman::p_load(
  dplyr, haven, sjlabelled,  psych,  purrr,  tidyr,  sjPlot,  ggplot2, 
  parameters,  table1,  car,  beeswarm,  lme4, scales, ggrepel, corrplot,
  ggtext, patchwork, lavaan, semTools, DT)

options(scipen = 999)
rm(list = ls())
```

```{r}
#| include: false

library(knitr)
knitr::opts_chunk$set(echo = TRUE, include = TRUE, warning = FALSE, message = FALSE)

table_format <- if(is_html_output()) {
  "html"
} else if(is_latex_output()) {
  "latex"
}
table_format2 <- if(is_html_output()) {
  T
} else if(is_latex_output()) {
  F
}

options(kableExtra.html.bsTable = T)
options(knitr.kable.NA = "")
```

```{r}
#| label: data
#| echo: false

icils <- readRDS("../data/proc_data/icils23_proc.rds")
pisa <- readRDS("../data/proc_data/pisa22_proc.rds")
```

# ICILS

## Descriptives

```{r}
#| label: fig-descr-icils
#| echo: true
#| fig-cap: Digital self-efficacy ICILS
#| fig-cap-location: bottom

a <- icils %>% 
  select(IS3G24A, IS3G24B, IS3G24C, IS3G24E, IS3G24F,
         IS3G24G, IS3G24H, IS3G24I, IS3G24J, IS3G24M) %>% 
  sjPlot::plot_likert(geom.colors = "Reds",
                      title = c("General (n = 135.615)"),
                      sort.frq = "pos.desc",
                      geom.size = 0.8,
                      axis.labels = c("edit_photos", "edit_text", "search_info", 
                                      "change_settings", "create_pres", "upload_media", "insert_image", "install_app", "eval_info", "find_source"),
                      catcount = 4,
                      values  =  "sum.outside",
                      reverse.colors = F,
                      reverse.scale = T,
                      show.n = FALSE,
                      show.prc.sign = T
  ) +
  ggplot2::theme(legend.position = "none")

b <- icils %>% 
  select(IS3G24D, IS3G24K, IS3G24L) %>% 
  sjPlot::plot_likert(geom.colors = "Reds",
                      title = c("Specialized"),
                      sort.frq = "pos.desc",
                      geom.size = 0.8,
                      axis.labels = c("build_page", "write_code", "devel_program"),
                      catcount = 4,
                      values  =  "sum.outside",
                      reverse.colors = F,
                      reverse.scale = T,
                      show.n = FALSE,
                      show.prc.sign = T
  ) +
  ggplot2::theme(legend.position = "bottom")

liker_icils <- a/b

liker_icils 
```

## Bivariates

```{r}
#| label: fig-corr-icils
#| echo: true
#| fig-cap: ICILS correlations
#| fig-cap-location: bottom

M <- psych::polychoric(icils[c(3:15)])

P <- cor(icils[c(3:15)], method = "pearson")

diag(M$rho) <- NA

diag(P) <- NA

rownames(M$rho) <- c("edit_photos (A)",
                     "edit_text (B)",
                     "search_info (C)",
                     "build_page (D)",
                     "change_settings (E)",
                     "create_pres (F)",
                     "upload_media (G)",
                     "insert_image (H)",
                     "install_app (I)",
                     "eval_info (J)",
                     "write_code (K)",
                     "devel_program (L)",
                     "find_source (M)")

#set Column names of the matrix
colnames(M$rho) <-c("(A)", "(B)","(C)","(D)","(E)","(F)","(G)",
                    "(H)","(I)", "(J)", "(K)", "(L)", "(M)")

rownames(P) <- c("edit_photos (A)",
                 "edit_text (B)",
                 "search_info (C)",
                 "build_page (D)",
                 "change_settings (E)",
                 "create_pres (F)",
                 "upload_media (G)",
                 "insert_image (H)",
                 "install_app (I)",
                 "eval_info (J)",
                 "write_code (K)",
                 "devel_program (L)",
                 "find_source (M)")

#set Column names of the matrix
colnames(P) <-c("(A)", "(B)","(C)","(D)","(E)","(F)","(G)",
                "(H)","(I)", "(J)", "(K)", "(L)", "(M)")

testp <- cor.mtest(M$rho, conf.level = 0.95)

#Plot the matrix using corrplot
corrplot::corrplot(M$rho,
                   method = "color",
                   addCoef.col = "black",
                   type = "upper",
                   tl.col = "black",
                   col = colorRampPalette(c("#B42012", "white", "#E16462"))(12),
                   bg = "white",
                   na.label = "-")
```

## Confirmatory factorial analysis

# PISA

## Descriptives

```{r}
#| label: select variables
#| include: false

pisa <- pisa %>%
  select(search_info, asses_info, share_info, pair_collab, how_to_share, 
         edit_text, collect_data, create_pres, page_web, change_settings, 
         select_app, create_program, identify_error, logical_solution, CNT)
```

```{r}
#| label: fig-descr-pisa
#| echo: true
#| fig-cap: Digital self-efficacy PISA
#| fig-cap-location: bottom

c <- pisa %>% 
  select(search_info, asses_info, share_info, pair_collab, how_to_share, 
         edit_text, collect_data, create_pres, page_web, change_settings, 
         select_app, create_program, identify_error, logical_solution) %>% 
  sjPlot::plot_likert(geom.colors = "Reds",
                      title = c("Digital self-efficacy (n = 393.607)"),
                      sort.frq = "pos.desc",
                      geom.size = 0.8,
                      axis.labels = c("search_info", "asses_info", "share_info",
                                      "pair_collab", "how_to_share",                                                       "edit_text", "collect_data", "create_pres",
                                      "page_web", "change_settings", "select_app",
                                      "create_program", "identify_error",
                                      "logical_solution"),
                      catcount = 4,
                      values  =  "sum.outside",
                      reverse.colors = F,
                      reverse.scale = T,
                      show.n = FALSE,
                      show.prc.sign = T
  ) +
  ggplot2::theme(legend.position = "bottom")

c
```

## Bivariates

```{r}
#| label: fig-corr-pisa
#| echo: true
#| fig-cap: PISA correlations
#| fig-cap-location: bottom


Mp <- psych::polychoric(pisa[c(1:14)])

Pp <- cor(pisa[c(1:14)], method = "pearson")

diag(Mp$rho) <- NA

diag(Pp) <- NA

rownames(Mp$rho) <- c("search_info (A)",
                      "asses_info (B)",
                      "share_info (C)",
                      "pair_collab (D)",
                      "explain_howtoshare (E)",
                      "edit_text (F)",
                      "collect_data (G)",
                      "create_pres (H)",
                      "page_web (I)", 
                      "change_settings (J)",
                      "select_app (K)",
                      "create_program (L)", 
                      "identify_error (M)",
                      "logical_solution (N)")

#set Column names of the matrix
colnames(Mp$rho) <-c("(A)", "(B)","(C)","(D)","(E)","(F)","(G)",
                    "(H)","(I)", "(J)", "(K)", "(L)", "(M)", "(N)")

rownames(Pp) <- c("search_info (A)",
                  "asses_info (B)",
                  "share_info (C)",
                  "pair_collab (D)",
                  "explain_howtoshare (E)",
                  "edit_text (F)",
                  "collect_data (G)",
                  "create_pres (H)",
                  "page_web (I)", 
                  "change_settings (J)",
                  "select_app (K)",
                  "create_program (L)", 
                  "identify_error (M)",
                  "logical_solution (N)")

#set Column names of the matrix
colnames(Pp) <-c("(A)", "(B)","(C)","(D)","(E)","(F)","(G)",
                "(H)","(I)", "(J)", "(K)", "(L)", "(M)", "(N)")

testpp <- cor.mtest(Mp$rho, conf.level = 0.95)

#Plot the matrix using corrplot
corrplot::corrplot(Mp$rho,
                   method = "color",
                   addCoef.col = "black",
                   type = "upper",
                   tl.col = "black",
                   col = colorRampPalette(c("#B42012", "white", "#E16462"))(12),
                   bg = "white",
                   number.digits = 2,
                   na.label = "-")
```

## Exploratory factor model (3 factors)

```{r}
#| include: false 

pisa_efa <- pisa %>% 
  select(search_info, asses_info, share_info, pair_collab, how_to_share, 
         edit_text, collect_data, create_pres, page_web, change_settings, 
         select_app, create_program, identify_error, logical_solution)
corMat <- round(cor(pisa_efa), 2)
KMO(corMat) 
cortest.bartlett(corMat, n = 393607)
```

```{r}
fac_pa <- fa(r = pisa_efa, nfactors = 3, fm= "pa")
fac_pa
```

## Confirmatory factor analysis

```{r}
#| label: Measurement model

model_cfa <- '
  gen_dse = ~ search_info + asses_info + share_info + pair_collab + how_to_share + 
         edit_text + collect_data + create_pres + change_settings + select_app
  spec_dse = ~ page_web + create_program + identify_error + logical_solution
  '

m_cfa <- cfa(model = model_cfa, 
              data = pisa, 
              estimator = "DWLS",
              ordered = T,
              std.lv = F)
```

```{r}
#| label: tbl-factor-loadings
#| tbl-cap: PISA Factor loadings 
#| tbl-cap-location: bottom
#| echo: true 

standardizedsolution(m_cfa) %>% 
  filter(op == "=~") %>% 
  select(Factor = lhs, Indicator = rhs, `Loading (DWLS)` = est.std) %>% 
  kable(format = "markdown", digits = 2)
```

En @tbl-factor-loadings las cargas factoriales se encuentran estandarizadas. Resulta llamativo que todos los loadings son bastante altos, lo cual podría sugerir que los factores están sobre explicando a los indicadores

```{r}
summary(m_cfa)
```

```{r}
#| label: tbl-fit-pisa
#| tbl-cap: PISA Fit measures
#| tbl-cap-location: bottom
#| echo: true

fit_pisa <- fitMeasures(m_cfa,
                         c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))

knitr::kable(fit_pisa, digits = 3)
```

$\chi^2$ es un número extremadamente alto y significativo, lo cual no es buen indicio, pero esto puede deberse al gran tamaño de la muestra (N \> 200 tienden a dar $\chi^2$ significativo).

El *CFI* y el *TLI* poseen valores que sugieren un buen ajuste del modelo (*CFI* & *TLI* \> 0.95), aunque el *RMSEA* contradice los indices de ajuste anteriores (*RMSEA* \< 0.05), lo cual evidencia una incongruencia en el modelo.

## SEM Multigrupo con PISA

```{r}
#| label: Multigroup

multigroup_cfa <- '
    gen_dse = ~ search_info + asses_info + share_info + pair_collab + how_to_share + 
         edit_text + collect_data + create_pres + change_settings + select_app
    spec_dse = ~ page_web + create_program + identify_error + logical_solution
  '
```

```{r}
#| label: modelo confirmatorio multigrupo

fitgroup <- sem(model = multigroup_cfa, data = pisa, group = "CNT")
```

### Visualización cargas factoriales por país

```{r}

all_params <- parameterEstimates(fitgroup, standardized = TRUE)

factor_loadings_all_groups <- all_params %>%
  filter(op == "=~")

group_labels <- lavInspect(fitgroup, "group.label")

country_map <- data.frame(group = 1:length(group_labels), CNT = unlist(group_labels))

factor_loadings_all_groups <- factor_loadings_all_groups %>%
  left_join(country_map, by = "group")
```

```{r}

loadings_gen_dse <- factor_loadings_all_groups %>%
  filter(lhs == "gen_dse") %>%
  select(CNT, item = rhs, loading = std.all, latent_factor = lhs)

labels_gen_dse <- loadings_gen_dse %>%
  group_by(item) %>%
  slice_min(order_by = loading, n = 3) %>%
  ungroup()

loadings_spec_dse <- factor_loadings_all_groups %>%
  filter(lhs == "spec_dse") %>%
  select(CNT, item = rhs, loading = std.all, latent_factor = lhs)

labels_spec_dse <- loadings_spec_dse %>%
  group_by(item) %>%
  slice_min(order_by = loading, n = 3) %>%
  ungroup()
```

#### Cleaveland loadings autoeficacia general

```{r}

library(forcats)

plot_gen_dse <- ggplot(loadings_gen_dse,
                       aes(x = loading,
                           y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
  geom_point(aes(color = '#B42012'), size = 3, alpha = 0.7) + 
    geom_text(data = labels_gen_dse, 
            aes(label = CNT), 
            nudge_y = 0.3,
            size = 2.5,
            color = "black",
            check_overlap = TRUE) +
  scale_color_identity(name = "Factor", 
                       guide = "legend", 
                       labels = c("General")) +
  labs(title = "Cargas Factoriales: Autoeficacia General",
       x = "Carga Factorial Estandarizada",
       y = "Ítem") +
  theme_minimal(base_size = 10) +
  theme(axis.text.y = element_text(size = 8),
        plot.title = element_text(hjust = 0.5),
        legend.position = "top")

print(plot_gen_dse)
```

El rango varía entre 0.6 y 0.9 aproximadamente. Japon se repite entre los países con menor carga factorial en las variables, y Brunei Darussalam y España también aparecen en varias ocasiones.. Las variables create_pres, collect_data, change_settings y select_app presentan en general un menor puntaje. 
#### Cleaveland loadings autoeficacia especializada

```{r}

plot_spec_dse <- ggplot(loadings_spec_dse,
                        aes(x = loading,
                            y = fct_reorder(item, loading, .fun = median, .desc = FALSE))) +
  geom_point(aes(color = '#E16462'), size = 3, alpha = 0.7) +
    geom_text_repel(data = labels_spec_dse, 
                  aes(label = CNT), 
                  size = 2.5,
                  color = "black",
                  box.padding = 0.4,
                  point.padding = 0.2,
                  min.segment.length = 0,
                  max.overlaps = Inf) +
  scale_color_identity(name = "Factor", 
                       guide = "legend", 
                       labels = c("Especializada")) +
  labs(title = "Cargas Factoriales: Autoeficacia Especializada", 
       x = "Carga Factorial Estandarizada",
       y = "Ítem") +
  theme_minimal(base_size = 10) +
  theme(axis.text.y = element_text(size = 8),
        plot.title = element_text(hjust = 0.5),
        legend.position = "top")

print(plot_spec_dse)
```

Se repite Letonia en tres de las categorías y Lituania en 2. Se observa una menor dispersión en los loadings.

### SEM por separado para cada país

Este procedimiento se realiza para obtener los indicadores de ajuste por cada CNT

```{r}

lista_paises <- unique(unlist(pisa$CNT))

resultados_lista <- list()
summary_lista <- list()

for (pais_actual in lista_paises) {
  
  # Imprimimos el progreso
  # cat("Procesando:", pais_actual, "...\n")
  
  datos_pais <- pisa %>%
    filter(CNT == pais_actual)
  
  fit_pais <- tryCatch({
    
    sem(model = multigroup_cfa, 
        data = datos_pais)
  }, error = function(e) {
    
     cat("  -> ¡ERROR! No se pudo ajustar el modelo para", pais_actual, ". Razón:", conditionMessage(e), "\n")
     return(NULL)
  })
    
  if (!is.null(fit_pais)) {
     if (lavInspect(fit_pais, "converged")) {
        medidas_ajuste <- fitMeasures(fit_pais)
        resultados_lista[[pais_actual]] <- medidas_ajuste
       # cat("  -> Modelo ajustado y resultados guardados.\n")
     } else {
        cat("  -> ¡ADVERTENCIA! El modelo para", pais_actual, "no convergió. Se omitirán sus resultados.\n")
        resultados_lista[[pais_actual]] <- rep(NA)
        
     }
  }
}

# cat("\n...Proceso de ajuste finalizado.\n")

```

```{r}


fit_indices_por_pais <- do.call(rbind, resultados_lista)

fit_indices_por_pais <- as.data.frame(fit_indices_por_pais)

fit_indices_por_pais <- fit_indices_por_pais %>%
  tibble::rownames_to_column(var = "CNT")

indices_ajuste <- fit_indices_por_pais %>% 
  select(CNT, chisq, df, rmsea, rmsea.ci.lower,  rmsea.ci.upper, srmr, cfi, tli)
```

```{r}
#| label: tabla-interactiva
#| echo: false

datatable(
  indices_ajuste,
  options = list(
    pageLength = 10,
    autoWidth = TRUE,
    searchHighlight = TRUE
  ),
  filter = 'top',
  rownames = FALSE,
  caption = "Índices de Ajuste del Modelo (Interactiva)"
)

```


#### Descriptivos índices de ajuste

```{r}

table1::table1(~ . + -CNT,data=indices_ajuste)
```

# SEM Multinivel con PISA

```{r}


multimodel_cfa <- '
    level: 1
    gen_dse = ~ search_info + asses_info + share_info + pair_collab + how_to_share + 
         edit_text + collect_data + create_pres + change_settings + select_app
    spec_dse = ~ create_program + identify_error + logical_solution
    level: 2
    gen_dse = ~ search_info + asses_info + share_info + pair_collab + how_to_share + 
         edit_text + collect_data + create_pres + change_settings + select_app
    spec_dse = ~ create_program + identify_error + logical_solution
  '
```

```{r}
fit <- sem(model = multimodel_cfa, data = pisa, cluster = "CNT")
```

### Cargas estandarizadas

```{r}
standardizedsolution(fit)
```

Se observa un panorama generalizado en las altas cargas factoriales en los indicadores. La gran mayoría ronda por el 0.8, mientras que solamente el indicador que trata sobre crear y mantener una página web tiene un loading \> 0.7

### Correlación intraclase

```{r}
lavInspect(fit, "icc")
```

El ICC de todos los indicadores es bastante alto. El caso más llamativo es el de la variable relativa a buscar información en dispositivos digitales, donde el 58% de su varianza se debe a diferencias entre países (diferencias en cómo comprenden la escala?).
